import math

# Функция для вычисления интерполяционного многочлена Ньютона
def newton_interpolation(xi, yi, x_star):
    n = len(xi)
    result = 0.0

    # Расчет разделенных разностей
    dd = [[0] * n for _ in range(n)]
    for i in range(n):
        dd[i][0] = yi[i]
    for j in range(1, n):
        for i in range(n - j):
            dd[i][j] = (dd[i + 1][j - 1] - dd[i][j - 1]) / (xi[i + j] - xi[i])

    # Вычисление значения интерполяционного многочлена в точке x*
    term = 1.0
    for j in range(n):
        result += dd[0][j] * term
        term *= (x_star - xi[j])

    return result

xi = [0.1 * math.pi, 0.2 * math.pi, 0.3 * math.pi, 0.4 * math.pi]
yi = [math.cos(x) for x in xi]
x_star = 0.25 * math.pi

# Вычисление значения интерполяционного многочлена в точке x*
interpolation_result = newton_interpolation(xi, yi, x_star)

# Вычисление погрешности интерполяции
true_value = math.cos(x_star)
interpolation_error = abs(interpolation_result - true_value)

print("Значение интерполяционного многочлена в точке x*: ", interpolation_result)
print("Значение погрешности интерполяции в точке x*: ", interpolation_error)
