import numpy as np

def coordinate_descent(f, initial_guess, step_size=0.1, tolerance=1e-6, max_iterations=1000):
    x = np.array(initial_guess)
    n = len(x)
    
    for _ in range(max_iterations):
        x_new = np.zeros(n)
        
        for i in range(n):
            partial_f = lambda xi: f(x[:i].tolist() + [xi] + x[i+1:].tolist())
            dxi = (partial_f(x[i] + step_size) - partial_f(x[i])) / step_size
            x_new[i] = x[i] - step_size * dxi

        if np.linalg.norm(x_new - x) < tolerance:
            return x_new
        
        x = x_new
    
    return x

def objective_function(x):
    return x[0]**2 + 3*x[1]**2 + np.cos(x[0] + x[1])

initial_guess = [0, 0]
optimum = coordinate_descent(objective_function, initial_guess)

print("Оптимальные значения переменных:")
print(optimum)
print("Значение функции в оптимуме:")
print(objective_function(optimum))
